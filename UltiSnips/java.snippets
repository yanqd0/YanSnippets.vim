# class
snippet helloworld "A 'Hello world!' demo" mb
/**
 * This is a helloworld Java class.
 *
 * @author `echo $USER`
 */
public class `!v expand("%:t:r")` {

	/**
	 * The main function of Java, which is the root of execution.
	 *
	 * @param args The arguments when executed outside.
	 */
	public static void main(String[] args) {
		System.out.println("Hello world!");
	}

}
endsnippet

snippet class "A new public class" mb
/**
 * ${1:Description of this class.}
 *
 * @author `echo $USER`
 */
public final class ${2:`!v expand("%:t:r")`} {
	public `!v expand("%:t:r")`() {
		${3:// TODO: Default constructor.}
	}

	$0
}
endsnippet

snippet iclass "A inner class" mb
class ${1:ClassName} {
	${1/(\w+).*/$1/}() {
		${2:// TODO: Default constructor.}
	}
}
endsnippet
###

# interface
snippet interface "A new interface" b
/**
 * ${1:Description of this interface.}
 *
 * @author `echo $USER`
 */
public interface ${2:`!v expand("%:t:r")`} {
	${3:// TODO: Declare at lease 1 interface.}
}
endsnippet
###

# if
snippet if "`if` block" b
if (${1:boolean}) {
	${2:${VISUAL:\/\/ TODO: if then...}}
}
$0
endsnippet

snippet ife "`if else` block" b
if (${1:boolean}) {
	${2:${VISUAL:\/\/ TODO: if then...}}
} else {
	${3:// TODO: else then...}
}
$0
endsnippet

snippet ifi "`if elif` block" b
if (${1:boolean}) {
	${2:${VISUAL:\/\/ TODO: if then...}}
} else if (${3:boolean}) {
	${4:// TODO: else if $3 then...}
}
$0
endsnippet

snippet ifie "`if elif else` block" b
if (${1:boolean}) {
	${2:${VISUAL:\/\/ TODO: if then...}}
} else if (${3:boolean}) {
	${4:// TODO: else if $3 then...}
} else {
	${5:// TODO: else then...}
}
$0
endsnippet
###

# swich
snippet switch "`swich case default` block" b
switch ($1) {
	case ${2:CONSTANCE_CASE}:
		// TODO: case $2:
	default:
		// TODO: Handle default situation.
}
$0
endsnippet
###

# for
snippet for "`for` block" b
for ($1) {
	${2:${VISUAL:\/\/ TODO: for...}}
}
$0
endsnippet
###

# while
snippet do "`do while` block" b
do {
	${1:${VISUAL:\/\/ TODO: do...while}}
} while (${2:boolean});
$0
endsnippet

snippet while "`while` block" b
while (${1:boolean}) {
	${2:${VISUAL:\/\/ TODO: while do...}}
}
$0
endsnippet
###

# try
snippet tryc "`try catch` block" b
try {
	${1:${VISUAL:\/\/ TODO: try block}}
} catch (${2:Exception} e) {
	${3:// TODO: Handle exceptions.}
}
$0
endsnippet

snippet tryf "`try finally` block" b
try {
	${1:${VISUAL:\/\/ TODO: try block}}
} finally {
	${2:// TODO: Do something before leaving.}
}
$0
endsnippet

snippet trycf "`try catch finally` block" b
try {
	${1:${VISUAL:\/\/ TODO: try block}}
} catch (${2:Exception} e) {
	${3:// TODO: Handle exceptions.}
} finally {
	${4:// TODO: Do something before leaving.}
}
$0
endsnippet
###

# synchronized {{{
snippet sync "`synchronized` block" b
synchronized (${1:Lock}) {
	${2:${VISUAL:\/\/ TODO: synchronized block}}
}
$0
endsnippet
###

# comment
snippet todo "Add a TODO" b
// TODO: ${1:Something to be done}, since `!v strftime("%Y-%m-%d")`
endsnippet

snippet fixme "Add a FIXME" b
// FIXME: ${1:Bug description}, since `!v strftime("%Y-%m-%d")`
endsnippet

snippet xxx "Add a XXX" b
// XXX: ${1:Something weird or unsure}, since `!v strftime("%Y-%m-%d")`
endsnippet
###
